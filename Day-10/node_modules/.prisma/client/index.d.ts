
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Students
 * 
 */
export type Students = $Result.DefaultSelection<Prisma.$StudentsPayload>
/**
 * Model StudentsProof
 * 
 */
export type StudentsProof = $Result.DefaultSelection<Prisma.$StudentsProofPayload>
/**
 * Model StudentsFees
 * 
 */
export type StudentsFees = $Result.DefaultSelection<Prisma.$StudentsFeesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  Male: 'Male',
  Female: 'Female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Prooftype: {
  AadharCard: 'AadharCard',
  PanCard: 'PanCard',
  MarkSheet: 'MarkSheet'
};

export type Prooftype = (typeof Prooftype)[keyof typeof Prooftype]


export const Payment: {
  OfflinePay: 'OfflinePay',
  BankTransfer: 'BankTransfer',
  NetBanking: 'NetBanking'
};

export type Payment = (typeof Payment)[keyof typeof Payment]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Prooftype = $Enums.Prooftype

export const Prooftype: typeof $Enums.Prooftype

export type Payment = $Enums.Payment

export const Payment: typeof $Enums.Payment

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Students
 * const students = await prisma.students.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Students
   * const students = await prisma.students.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.students`: Exposes CRUD operations for the **Students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.students.findMany()
    * ```
    */
  get students(): Prisma.StudentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentsProof`: Exposes CRUD operations for the **StudentsProof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentsProofs
    * const studentsProofs = await prisma.studentsProof.findMany()
    * ```
    */
  get studentsProof(): Prisma.StudentsProofDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentsFees`: Exposes CRUD operations for the **StudentsFees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentsFees
    * const studentsFees = await prisma.studentsFees.findMany()
    * ```
    */
  get studentsFees(): Prisma.StudentsFeesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Students: 'Students',
    StudentsProof: 'StudentsProof',
    StudentsFees: 'StudentsFees'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "students" | "studentsProof" | "studentsFees"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Students: {
        payload: Prisma.$StudentsPayload<ExtArgs>
        fields: Prisma.StudentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          findFirst: {
            args: Prisma.StudentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          findMany: {
            args: Prisma.StudentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>[]
          }
          create: {
            args: Prisma.StudentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          createMany: {
            args: Prisma.StudentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>[]
          }
          delete: {
            args: Prisma.StudentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          update: {
            args: Prisma.StudentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          deleteMany: {
            args: Prisma.StudentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>[]
          }
          upsert: {
            args: Prisma.StudentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsPayload>
          }
          aggregate: {
            args: Prisma.StudentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudents>
          }
          groupBy: {
            args: Prisma.StudentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentsCountArgs<ExtArgs>
            result: $Utils.Optional<StudentsCountAggregateOutputType> | number
          }
        }
      }
      StudentsProof: {
        payload: Prisma.$StudentsProofPayload<ExtArgs>
        fields: Prisma.StudentsProofFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentsProofFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentsProofFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          findFirst: {
            args: Prisma.StudentsProofFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentsProofFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          findMany: {
            args: Prisma.StudentsProofFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>[]
          }
          create: {
            args: Prisma.StudentsProofCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          createMany: {
            args: Prisma.StudentsProofCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentsProofCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>[]
          }
          delete: {
            args: Prisma.StudentsProofDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          update: {
            args: Prisma.StudentsProofUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          deleteMany: {
            args: Prisma.StudentsProofDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentsProofUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentsProofUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>[]
          }
          upsert: {
            args: Prisma.StudentsProofUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsProofPayload>
          }
          aggregate: {
            args: Prisma.StudentsProofAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentsProof>
          }
          groupBy: {
            args: Prisma.StudentsProofGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentsProofGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentsProofCountArgs<ExtArgs>
            result: $Utils.Optional<StudentsProofCountAggregateOutputType> | number
          }
        }
      }
      StudentsFees: {
        payload: Prisma.$StudentsFeesPayload<ExtArgs>
        fields: Prisma.StudentsFeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentsFeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentsFeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          findFirst: {
            args: Prisma.StudentsFeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentsFeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          findMany: {
            args: Prisma.StudentsFeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>[]
          }
          create: {
            args: Prisma.StudentsFeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          createMany: {
            args: Prisma.StudentsFeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentsFeesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>[]
          }
          delete: {
            args: Prisma.StudentsFeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          update: {
            args: Prisma.StudentsFeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          deleteMany: {
            args: Prisma.StudentsFeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentsFeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentsFeesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>[]
          }
          upsert: {
            args: Prisma.StudentsFeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentsFeesPayload>
          }
          aggregate: {
            args: Prisma.StudentsFeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentsFees>
          }
          groupBy: {
            args: Prisma.StudentsFeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentsFeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentsFeesCountArgs<ExtArgs>
            result: $Utils.Optional<StudentsFeesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    students?: StudentsOmit
    studentsProof?: StudentsProofOmit
    studentsFees?: StudentsFeesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentsCountOutputType
   */

  export type StudentsCountOutputType = {
    studentfees: number
  }

  export type StudentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentfees?: boolean | StudentsCountOutputTypeCountStudentfeesArgs
  }

  // Custom InputTypes
  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsCountOutputType
     */
    select?: StudentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeCountStudentfeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentsFeesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Students
   */

  export type AggregateStudents = {
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  export type StudentsAvgAggregateOutputType = {
    roll_no: number | null
    age: number | null
  }

  export type StudentsSumAggregateOutputType = {
    roll_no: number | null
    age: number | null
  }

  export type StudentsMinAggregateOutputType = {
    roll_no: number | null
    name: string | null
    age: number | null
    gender: $Enums.Gender | null
    dob: string | null
    bloodgroup: string | null
  }

  export type StudentsMaxAggregateOutputType = {
    roll_no: number | null
    name: string | null
    age: number | null
    gender: $Enums.Gender | null
    dob: string | null
    bloodgroup: string | null
  }

  export type StudentsCountAggregateOutputType = {
    roll_no: number
    name: number
    age: number
    gender: number
    dob: number
    bloodgroup: number
    _all: number
  }


  export type StudentsAvgAggregateInputType = {
    roll_no?: true
    age?: true
  }

  export type StudentsSumAggregateInputType = {
    roll_no?: true
    age?: true
  }

  export type StudentsMinAggregateInputType = {
    roll_no?: true
    name?: true
    age?: true
    gender?: true
    dob?: true
    bloodgroup?: true
  }

  export type StudentsMaxAggregateInputType = {
    roll_no?: true
    name?: true
    age?: true
    gender?: true
    dob?: true
    bloodgroup?: true
  }

  export type StudentsCountAggregateInputType = {
    roll_no?: true
    name?: true
    age?: true
    gender?: true
    dob?: true
    bloodgroup?: true
    _all?: true
  }

  export type StudentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to aggregate.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentsOrderByWithRelationInput | StudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsMaxAggregateInputType
  }

  export type GetStudentsAggregateType<T extends StudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents[P]>
      : GetScalarType<T[P], AggregateStudents[P]>
  }




  export type StudentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentsWhereInput
    orderBy?: StudentsOrderByWithAggregationInput | StudentsOrderByWithAggregationInput[]
    by: StudentsScalarFieldEnum[] | StudentsScalarFieldEnum
    having?: StudentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsCountAggregateInputType | true
    _avg?: StudentsAvgAggregateInputType
    _sum?: StudentsSumAggregateInputType
    _min?: StudentsMinAggregateInputType
    _max?: StudentsMaxAggregateInputType
  }

  export type StudentsGroupByOutputType = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  type GetStudentsGroupByPayload<T extends StudentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsGroupByOutputType[P]>
        }
      >
    >


  export type StudentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    dob?: boolean
    bloodgroup?: boolean
    studentsproof?: boolean | Students$studentsproofArgs<ExtArgs>
    studentfees?: boolean | Students$studentfeesArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students"]>

  export type StudentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    dob?: boolean
    bloodgroup?: boolean
  }, ExtArgs["result"]["students"]>

  export type StudentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roll_no?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    dob?: boolean
    bloodgroup?: boolean
  }, ExtArgs["result"]["students"]>

  export type StudentsSelectScalar = {
    roll_no?: boolean
    name?: boolean
    age?: boolean
    gender?: boolean
    dob?: boolean
    bloodgroup?: boolean
  }

  export type StudentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roll_no" | "name" | "age" | "gender" | "dob" | "bloodgroup", ExtArgs["result"]["students"]>
  export type StudentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentsproof?: boolean | Students$studentsproofArgs<ExtArgs>
    studentfees?: boolean | Students$studentfeesArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StudentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Students"
    objects: {
      studentsproof: Prisma.$StudentsProofPayload<ExtArgs> | null
      studentfees: Prisma.$StudentsFeesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      roll_no: number
      name: string
      age: number
      gender: $Enums.Gender
      dob: string
      bloodgroup: string
    }, ExtArgs["result"]["students"]>
    composites: {}
  }

  type StudentsGetPayload<S extends boolean | null | undefined | StudentsDefaultArgs> = $Result.GetResult<Prisma.$StudentsPayload, S>

  type StudentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentsCountAggregateInputType | true
    }

  export interface StudentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Students'], meta: { name: 'Students' } }
    /**
     * Find zero or one Students that matches the filter.
     * @param {StudentsFindUniqueArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentsFindUniqueArgs>(args: SelectSubset<T, StudentsFindUniqueArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Students that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentsFindUniqueOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentsFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindFirstArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentsFindFirstArgs>(args?: SelectSubset<T, StudentsFindFirstArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindFirstOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentsFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.students.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.students.findMany({ take: 10 })
     * 
     * // Only select the `roll_no`
     * const studentsWithRoll_noOnly = await prisma.students.findMany({ select: { roll_no: true } })
     * 
     */
    findMany<T extends StudentsFindManyArgs>(args?: SelectSubset<T, StudentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Students.
     * @param {StudentsCreateArgs} args - Arguments to create a Students.
     * @example
     * // Create one Students
     * const Students = await prisma.students.create({
     *   data: {
     *     // ... data to create a Students
     *   }
     * })
     * 
     */
    create<T extends StudentsCreateArgs>(args: SelectSubset<T, StudentsCreateArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentsCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const students = await prisma.students.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentsCreateManyArgs>(args?: SelectSubset<T, StudentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentsCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const students = await prisma.students.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `roll_no`
     * const studentsWithRoll_noOnly = await prisma.students.createManyAndReturn({
     *   select: { roll_no: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentsCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Students.
     * @param {StudentsDeleteArgs} args - Arguments to delete one Students.
     * @example
     * // Delete one Students
     * const Students = await prisma.students.delete({
     *   where: {
     *     // ... filter to delete one Students
     *   }
     * })
     * 
     */
    delete<T extends StudentsDeleteArgs>(args: SelectSubset<T, StudentsDeleteArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Students.
     * @param {StudentsUpdateArgs} args - Arguments to update one Students.
     * @example
     * // Update one Students
     * const students = await prisma.students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentsUpdateArgs>(args: SelectSubset<T, StudentsUpdateArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentsDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentsDeleteManyArgs>(args?: SelectSubset<T, StudentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentsUpdateManyArgs>(args: SelectSubset<T, StudentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentsUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `roll_no`
     * const studentsWithRoll_noOnly = await prisma.students.updateManyAndReturn({
     *   select: { roll_no: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentsUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Students.
     * @param {StudentsUpsertArgs} args - Arguments to update or create a Students.
     * @example
     * // Update or create a Students
     * const students = await prisma.students.upsert({
     *   create: {
     *     // ... data to create a Students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students we want to update
     *   }
     * })
     */
    upsert<T extends StudentsUpsertArgs>(args: SelectSubset<T, StudentsUpsertArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.students.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentsCountArgs>(
      args?: Subset<T, StudentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsAggregateArgs>(args: Subset<T, StudentsAggregateArgs>): Prisma.PrismaPromise<GetStudentsAggregateType<T>>

    /**
     * Group by Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentsGroupByArgs['orderBy'] }
        : { orderBy?: StudentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Students model
   */
  readonly fields: StudentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    studentsproof<T extends Students$studentsproofArgs<ExtArgs> = {}>(args?: Subset<T, Students$studentsproofArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    studentfees<T extends Students$studentfeesArgs<ExtArgs> = {}>(args?: Subset<T, Students$studentfeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Students model
   */
  interface StudentsFieldRefs {
    readonly roll_no: FieldRef<"Students", 'Int'>
    readonly name: FieldRef<"Students", 'String'>
    readonly age: FieldRef<"Students", 'Int'>
    readonly gender: FieldRef<"Students", 'Gender'>
    readonly dob: FieldRef<"Students", 'String'>
    readonly bloodgroup: FieldRef<"Students", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Students findUnique
   */
  export type StudentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where: StudentsWhereUniqueInput
  }

  /**
   * Students findUniqueOrThrow
   */
  export type StudentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where: StudentsWhereUniqueInput
  }

  /**
   * Students findFirst
   */
  export type StudentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentsOrderByWithRelationInput | StudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * Students findFirstOrThrow
   */
  export type StudentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentsOrderByWithRelationInput | StudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * Students findMany
   */
  export type StudentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentsOrderByWithRelationInput | StudentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * Students create
   */
  export type StudentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Students.
     */
    data: XOR<StudentsCreateInput, StudentsUncheckedCreateInput>
  }

  /**
   * Students createMany
   */
  export type StudentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentsCreateManyInput | StudentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Students createManyAndReturn
   */
  export type StudentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentsCreateManyInput | StudentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Students update
   */
  export type StudentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Students.
     */
    data: XOR<StudentsUpdateInput, StudentsUncheckedUpdateInput>
    /**
     * Choose, which Students to update.
     */
    where: StudentsWhereUniqueInput
  }

  /**
   * Students updateMany
   */
  export type StudentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentsUpdateManyMutationInput, StudentsUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentsWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Students updateManyAndReturn
   */
  export type StudentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentsUpdateManyMutationInput, StudentsUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentsWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Students upsert
   */
  export type StudentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Students to update in case it exists.
     */
    where: StudentsWhereUniqueInput
    /**
     * In case the Students found by the `where` argument doesn't exist, create a new Students with this data.
     */
    create: XOR<StudentsCreateInput, StudentsUncheckedCreateInput>
    /**
     * In case the Students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentsUpdateInput, StudentsUncheckedUpdateInput>
  }

  /**
   * Students delete
   */
  export type StudentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
    /**
     * Filter which Students to delete.
     */
    where: StudentsWhereUniqueInput
  }

  /**
   * Students deleteMany
   */
  export type StudentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentsWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Students.studentsproof
   */
  export type Students$studentsproofArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    where?: StudentsProofWhereInput
  }

  /**
   * Students.studentfees
   */
  export type Students$studentfeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    where?: StudentsFeesWhereInput
    orderBy?: StudentsFeesOrderByWithRelationInput | StudentsFeesOrderByWithRelationInput[]
    cursor?: StudentsFeesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentsFeesScalarFieldEnum | StudentsFeesScalarFieldEnum[]
  }

  /**
   * Students without action
   */
  export type StudentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Students
     */
    select?: StudentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Students
     */
    omit?: StudentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsInclude<ExtArgs> | null
  }


  /**
   * Model StudentsProof
   */

  export type AggregateStudentsProof = {
    _count: StudentsProofCountAggregateOutputType | null
    _avg: StudentsProofAvgAggregateOutputType | null
    _sum: StudentsProofSumAggregateOutputType | null
    _min: StudentsProofMinAggregateOutputType | null
    _max: StudentsProofMaxAggregateOutputType | null
  }

  export type StudentsProofAvgAggregateOutputType = {
    proof_id: number | null
    roll_no: number | null
  }

  export type StudentsProofSumAggregateOutputType = {
    proof_id: number | null
    roll_no: number | null
  }

  export type StudentsProofMinAggregateOutputType = {
    proof_id: number | null
    proof_type: $Enums.Prooftype | null
    proof_link: string | null
    roll_no: number | null
  }

  export type StudentsProofMaxAggregateOutputType = {
    proof_id: number | null
    proof_type: $Enums.Prooftype | null
    proof_link: string | null
    roll_no: number | null
  }

  export type StudentsProofCountAggregateOutputType = {
    proof_id: number
    proof_type: number
    proof_link: number
    roll_no: number
    _all: number
  }


  export type StudentsProofAvgAggregateInputType = {
    proof_id?: true
    roll_no?: true
  }

  export type StudentsProofSumAggregateInputType = {
    proof_id?: true
    roll_no?: true
  }

  export type StudentsProofMinAggregateInputType = {
    proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
  }

  export type StudentsProofMaxAggregateInputType = {
    proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
  }

  export type StudentsProofCountAggregateInputType = {
    proof_id?: true
    proof_type?: true
    proof_link?: true
    roll_no?: true
    _all?: true
  }

  export type StudentsProofAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentsProof to aggregate.
     */
    where?: StudentsProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsProofs to fetch.
     */
    orderBy?: StudentsProofOrderByWithRelationInput | StudentsProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentsProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentsProofs
    **/
    _count?: true | StudentsProofCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsProofAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsProofSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsProofMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsProofMaxAggregateInputType
  }

  export type GetStudentsProofAggregateType<T extends StudentsProofAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentsProof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentsProof[P]>
      : GetScalarType<T[P], AggregateStudentsProof[P]>
  }




  export type StudentsProofGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentsProofWhereInput
    orderBy?: StudentsProofOrderByWithAggregationInput | StudentsProofOrderByWithAggregationInput[]
    by: StudentsProofScalarFieldEnum[] | StudentsProofScalarFieldEnum
    having?: StudentsProofScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsProofCountAggregateInputType | true
    _avg?: StudentsProofAvgAggregateInputType
    _sum?: StudentsProofSumAggregateInputType
    _min?: StudentsProofMinAggregateInputType
    _max?: StudentsProofMaxAggregateInputType
  }

  export type StudentsProofGroupByOutputType = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
    roll_no: number
    _count: StudentsProofCountAggregateOutputType | null
    _avg: StudentsProofAvgAggregateOutputType | null
    _sum: StudentsProofSumAggregateOutputType | null
    _min: StudentsProofMinAggregateOutputType | null
    _max: StudentsProofMaxAggregateOutputType | null
  }

  type GetStudentsProofGroupByPayload<T extends StudentsProofGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentsProofGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsProofGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsProofGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsProofGroupByOutputType[P]>
        }
      >
    >


  export type StudentsProofSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsProof"]>

  export type StudentsProofSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsProof"]>

  export type StudentsProofSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsProof"]>

  export type StudentsProofSelectScalar = {
    proof_id?: boolean
    proof_type?: boolean
    proof_link?: boolean
    roll_no?: boolean
  }

  export type StudentsProofOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"proof_id" | "proof_type" | "proof_link" | "roll_no", ExtArgs["result"]["studentsProof"]>
  export type StudentsProofInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }
  export type StudentsProofIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }
  export type StudentsProofIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }

  export type $StudentsProofPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentsProof"
    objects: {
      students: Prisma.$StudentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      proof_id: number
      proof_type: $Enums.Prooftype
      proof_link: string
      roll_no: number
    }, ExtArgs["result"]["studentsProof"]>
    composites: {}
  }

  type StudentsProofGetPayload<S extends boolean | null | undefined | StudentsProofDefaultArgs> = $Result.GetResult<Prisma.$StudentsProofPayload, S>

  type StudentsProofCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentsProofFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentsProofCountAggregateInputType | true
    }

  export interface StudentsProofDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentsProof'], meta: { name: 'StudentsProof' } }
    /**
     * Find zero or one StudentsProof that matches the filter.
     * @param {StudentsProofFindUniqueArgs} args - Arguments to find a StudentsProof
     * @example
     * // Get one StudentsProof
     * const studentsProof = await prisma.studentsProof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentsProofFindUniqueArgs>(args: SelectSubset<T, StudentsProofFindUniqueArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentsProof that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentsProofFindUniqueOrThrowArgs} args - Arguments to find a StudentsProof
     * @example
     * // Get one StudentsProof
     * const studentsProof = await prisma.studentsProof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentsProofFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentsProofFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentsProof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofFindFirstArgs} args - Arguments to find a StudentsProof
     * @example
     * // Get one StudentsProof
     * const studentsProof = await prisma.studentsProof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentsProofFindFirstArgs>(args?: SelectSubset<T, StudentsProofFindFirstArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentsProof that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofFindFirstOrThrowArgs} args - Arguments to find a StudentsProof
     * @example
     * // Get one StudentsProof
     * const studentsProof = await prisma.studentsProof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentsProofFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentsProofFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentsProofs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentsProofs
     * const studentsProofs = await prisma.studentsProof.findMany()
     * 
     * // Get first 10 StudentsProofs
     * const studentsProofs = await prisma.studentsProof.findMany({ take: 10 })
     * 
     * // Only select the `proof_id`
     * const studentsProofWithProof_idOnly = await prisma.studentsProof.findMany({ select: { proof_id: true } })
     * 
     */
    findMany<T extends StudentsProofFindManyArgs>(args?: SelectSubset<T, StudentsProofFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentsProof.
     * @param {StudentsProofCreateArgs} args - Arguments to create a StudentsProof.
     * @example
     * // Create one StudentsProof
     * const StudentsProof = await prisma.studentsProof.create({
     *   data: {
     *     // ... data to create a StudentsProof
     *   }
     * })
     * 
     */
    create<T extends StudentsProofCreateArgs>(args: SelectSubset<T, StudentsProofCreateArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentsProofs.
     * @param {StudentsProofCreateManyArgs} args - Arguments to create many StudentsProofs.
     * @example
     * // Create many StudentsProofs
     * const studentsProof = await prisma.studentsProof.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentsProofCreateManyArgs>(args?: SelectSubset<T, StudentsProofCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentsProofs and returns the data saved in the database.
     * @param {StudentsProofCreateManyAndReturnArgs} args - Arguments to create many StudentsProofs.
     * @example
     * // Create many StudentsProofs
     * const studentsProof = await prisma.studentsProof.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentsProofs and only return the `proof_id`
     * const studentsProofWithProof_idOnly = await prisma.studentsProof.createManyAndReturn({
     *   select: { proof_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentsProofCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentsProofCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentsProof.
     * @param {StudentsProofDeleteArgs} args - Arguments to delete one StudentsProof.
     * @example
     * // Delete one StudentsProof
     * const StudentsProof = await prisma.studentsProof.delete({
     *   where: {
     *     // ... filter to delete one StudentsProof
     *   }
     * })
     * 
     */
    delete<T extends StudentsProofDeleteArgs>(args: SelectSubset<T, StudentsProofDeleteArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentsProof.
     * @param {StudentsProofUpdateArgs} args - Arguments to update one StudentsProof.
     * @example
     * // Update one StudentsProof
     * const studentsProof = await prisma.studentsProof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentsProofUpdateArgs>(args: SelectSubset<T, StudentsProofUpdateArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentsProofs.
     * @param {StudentsProofDeleteManyArgs} args - Arguments to filter StudentsProofs to delete.
     * @example
     * // Delete a few StudentsProofs
     * const { count } = await prisma.studentsProof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentsProofDeleteManyArgs>(args?: SelectSubset<T, StudentsProofDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentsProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentsProofs
     * const studentsProof = await prisma.studentsProof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentsProofUpdateManyArgs>(args: SelectSubset<T, StudentsProofUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentsProofs and returns the data updated in the database.
     * @param {StudentsProofUpdateManyAndReturnArgs} args - Arguments to update many StudentsProofs.
     * @example
     * // Update many StudentsProofs
     * const studentsProof = await prisma.studentsProof.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentsProofs and only return the `proof_id`
     * const studentsProofWithProof_idOnly = await prisma.studentsProof.updateManyAndReturn({
     *   select: { proof_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentsProofUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentsProofUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentsProof.
     * @param {StudentsProofUpsertArgs} args - Arguments to update or create a StudentsProof.
     * @example
     * // Update or create a StudentsProof
     * const studentsProof = await prisma.studentsProof.upsert({
     *   create: {
     *     // ... data to create a StudentsProof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentsProof we want to update
     *   }
     * })
     */
    upsert<T extends StudentsProofUpsertArgs>(args: SelectSubset<T, StudentsProofUpsertArgs<ExtArgs>>): Prisma__StudentsProofClient<$Result.GetResult<Prisma.$StudentsProofPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentsProofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofCountArgs} args - Arguments to filter StudentsProofs to count.
     * @example
     * // Count the number of StudentsProofs
     * const count = await prisma.studentsProof.count({
     *   where: {
     *     // ... the filter for the StudentsProofs we want to count
     *   }
     * })
    **/
    count<T extends StudentsProofCountArgs>(
      args?: Subset<T, StudentsProofCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsProofCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentsProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsProofAggregateArgs>(args: Subset<T, StudentsProofAggregateArgs>): Prisma.PrismaPromise<GetStudentsProofAggregateType<T>>

    /**
     * Group by StudentsProof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsProofGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentsProofGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentsProofGroupByArgs['orderBy'] }
        : { orderBy?: StudentsProofGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentsProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentsProof model
   */
  readonly fields: StudentsProofFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentsProof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentsProofClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends StudentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentsDefaultArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentsProof model
   */
  interface StudentsProofFieldRefs {
    readonly proof_id: FieldRef<"StudentsProof", 'Int'>
    readonly proof_type: FieldRef<"StudentsProof", 'Prooftype'>
    readonly proof_link: FieldRef<"StudentsProof", 'String'>
    readonly roll_no: FieldRef<"StudentsProof", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentsProof findUnique
   */
  export type StudentsProofFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentsProof to fetch.
     */
    where: StudentsProofWhereUniqueInput
  }

  /**
   * StudentsProof findUniqueOrThrow
   */
  export type StudentsProofFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentsProof to fetch.
     */
    where: StudentsProofWhereUniqueInput
  }

  /**
   * StudentsProof findFirst
   */
  export type StudentsProofFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentsProof to fetch.
     */
    where?: StudentsProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsProofs to fetch.
     */
    orderBy?: StudentsProofOrderByWithRelationInput | StudentsProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentsProofs.
     */
    cursor?: StudentsProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentsProofs.
     */
    distinct?: StudentsProofScalarFieldEnum | StudentsProofScalarFieldEnum[]
  }

  /**
   * StudentsProof findFirstOrThrow
   */
  export type StudentsProofFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentsProof to fetch.
     */
    where?: StudentsProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsProofs to fetch.
     */
    orderBy?: StudentsProofOrderByWithRelationInput | StudentsProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentsProofs.
     */
    cursor?: StudentsProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsProofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentsProofs.
     */
    distinct?: StudentsProofScalarFieldEnum | StudentsProofScalarFieldEnum[]
  }

  /**
   * StudentsProof findMany
   */
  export type StudentsProofFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter, which StudentsProofs to fetch.
     */
    where?: StudentsProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsProofs to fetch.
     */
    orderBy?: StudentsProofOrderByWithRelationInput | StudentsProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentsProofs.
     */
    cursor?: StudentsProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsProofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsProofs.
     */
    skip?: number
    distinct?: StudentsProofScalarFieldEnum | StudentsProofScalarFieldEnum[]
  }

  /**
   * StudentsProof create
   */
  export type StudentsProofCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentsProof.
     */
    data: XOR<StudentsProofCreateInput, StudentsProofUncheckedCreateInput>
  }

  /**
   * StudentsProof createMany
   */
  export type StudentsProofCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentsProofs.
     */
    data: StudentsProofCreateManyInput | StudentsProofCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentsProof createManyAndReturn
   */
  export type StudentsProofCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * The data used to create many StudentsProofs.
     */
    data: StudentsProofCreateManyInput | StudentsProofCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentsProof update
   */
  export type StudentsProofUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentsProof.
     */
    data: XOR<StudentsProofUpdateInput, StudentsProofUncheckedUpdateInput>
    /**
     * Choose, which StudentsProof to update.
     */
    where: StudentsProofWhereUniqueInput
  }

  /**
   * StudentsProof updateMany
   */
  export type StudentsProofUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentsProofs.
     */
    data: XOR<StudentsProofUpdateManyMutationInput, StudentsProofUncheckedUpdateManyInput>
    /**
     * Filter which StudentsProofs to update
     */
    where?: StudentsProofWhereInput
    /**
     * Limit how many StudentsProofs to update.
     */
    limit?: number
  }

  /**
   * StudentsProof updateManyAndReturn
   */
  export type StudentsProofUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * The data used to update StudentsProofs.
     */
    data: XOR<StudentsProofUpdateManyMutationInput, StudentsProofUncheckedUpdateManyInput>
    /**
     * Filter which StudentsProofs to update
     */
    where?: StudentsProofWhereInput
    /**
     * Limit how many StudentsProofs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentsProof upsert
   */
  export type StudentsProofUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentsProof to update in case it exists.
     */
    where: StudentsProofWhereUniqueInput
    /**
     * In case the StudentsProof found by the `where` argument doesn't exist, create a new StudentsProof with this data.
     */
    create: XOR<StudentsProofCreateInput, StudentsProofUncheckedCreateInput>
    /**
     * In case the StudentsProof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentsProofUpdateInput, StudentsProofUncheckedUpdateInput>
  }

  /**
   * StudentsProof delete
   */
  export type StudentsProofDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
    /**
     * Filter which StudentsProof to delete.
     */
    where: StudentsProofWhereUniqueInput
  }

  /**
   * StudentsProof deleteMany
   */
  export type StudentsProofDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentsProofs to delete
     */
    where?: StudentsProofWhereInput
    /**
     * Limit how many StudentsProofs to delete.
     */
    limit?: number
  }

  /**
   * StudentsProof without action
   */
  export type StudentsProofDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsProof
     */
    select?: StudentsProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsProof
     */
    omit?: StudentsProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsProofInclude<ExtArgs> | null
  }


  /**
   * Model StudentsFees
   */

  export type AggregateStudentsFees = {
    _count: StudentsFeesCountAggregateOutputType | null
    _avg: StudentsFeesAvgAggregateOutputType | null
    _sum: StudentsFeesSumAggregateOutputType | null
    _min: StudentsFeesMinAggregateOutputType | null
    _max: StudentsFeesMaxAggregateOutputType | null
  }

  export type StudentsFeesAvgAggregateOutputType = {
    payment_id: number | null
    roll_no: number | null
  }

  export type StudentsFeesSumAggregateOutputType = {
    payment_id: number | null
    roll_no: number | null
  }

  export type StudentsFeesMinAggregateOutputType = {
    payment_id: number | null
    payment_method: $Enums.Payment | null
    payment_amount: string | null
    roll_no: number | null
  }

  export type StudentsFeesMaxAggregateOutputType = {
    payment_id: number | null
    payment_method: $Enums.Payment | null
    payment_amount: string | null
    roll_no: number | null
  }

  export type StudentsFeesCountAggregateOutputType = {
    payment_id: number
    payment_method: number
    payment_amount: number
    roll_no: number
    _all: number
  }


  export type StudentsFeesAvgAggregateInputType = {
    payment_id?: true
    roll_no?: true
  }

  export type StudentsFeesSumAggregateInputType = {
    payment_id?: true
    roll_no?: true
  }

  export type StudentsFeesMinAggregateInputType = {
    payment_id?: true
    payment_method?: true
    payment_amount?: true
    roll_no?: true
  }

  export type StudentsFeesMaxAggregateInputType = {
    payment_id?: true
    payment_method?: true
    payment_amount?: true
    roll_no?: true
  }

  export type StudentsFeesCountAggregateInputType = {
    payment_id?: true
    payment_method?: true
    payment_amount?: true
    roll_no?: true
    _all?: true
  }

  export type StudentsFeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentsFees to aggregate.
     */
    where?: StudentsFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsFees to fetch.
     */
    orderBy?: StudentsFeesOrderByWithRelationInput | StudentsFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentsFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentsFees
    **/
    _count?: true | StudentsFeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsFeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsFeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsFeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsFeesMaxAggregateInputType
  }

  export type GetStudentsFeesAggregateType<T extends StudentsFeesAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentsFees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentsFees[P]>
      : GetScalarType<T[P], AggregateStudentsFees[P]>
  }




  export type StudentsFeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentsFeesWhereInput
    orderBy?: StudentsFeesOrderByWithAggregationInput | StudentsFeesOrderByWithAggregationInput[]
    by: StudentsFeesScalarFieldEnum[] | StudentsFeesScalarFieldEnum
    having?: StudentsFeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsFeesCountAggregateInputType | true
    _avg?: StudentsFeesAvgAggregateInputType
    _sum?: StudentsFeesSumAggregateInputType
    _min?: StudentsFeesMinAggregateInputType
    _max?: StudentsFeesMaxAggregateInputType
  }

  export type StudentsFeesGroupByOutputType = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
    roll_no: number
    _count: StudentsFeesCountAggregateOutputType | null
    _avg: StudentsFeesAvgAggregateOutputType | null
    _sum: StudentsFeesSumAggregateOutputType | null
    _min: StudentsFeesMinAggregateOutputType | null
    _max: StudentsFeesMaxAggregateOutputType | null
  }

  type GetStudentsFeesGroupByPayload<T extends StudentsFeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentsFeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsFeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsFeesGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsFeesGroupByOutputType[P]>
        }
      >
    >


  export type StudentsFeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    payment_method?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsFees"]>

  export type StudentsFeesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    payment_method?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsFees"]>

  export type StudentsFeesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    payment_method?: boolean
    payment_amount?: boolean
    roll_no?: boolean
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentsFees"]>

  export type StudentsFeesSelectScalar = {
    payment_id?: boolean
    payment_method?: boolean
    payment_amount?: boolean
    roll_no?: boolean
  }

  export type StudentsFeesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"payment_id" | "payment_method" | "payment_amount" | "roll_no", ExtArgs["result"]["studentsFees"]>
  export type StudentsFeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }
  export type StudentsFeesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }
  export type StudentsFeesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudentsDefaultArgs<ExtArgs>
  }

  export type $StudentsFeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentsFees"
    objects: {
      students: Prisma.$StudentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      payment_id: number
      payment_method: $Enums.Payment
      payment_amount: string
      roll_no: number
    }, ExtArgs["result"]["studentsFees"]>
    composites: {}
  }

  type StudentsFeesGetPayload<S extends boolean | null | undefined | StudentsFeesDefaultArgs> = $Result.GetResult<Prisma.$StudentsFeesPayload, S>

  type StudentsFeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentsFeesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentsFeesCountAggregateInputType | true
    }

  export interface StudentsFeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentsFees'], meta: { name: 'StudentsFees' } }
    /**
     * Find zero or one StudentsFees that matches the filter.
     * @param {StudentsFeesFindUniqueArgs} args - Arguments to find a StudentsFees
     * @example
     * // Get one StudentsFees
     * const studentsFees = await prisma.studentsFees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentsFeesFindUniqueArgs>(args: SelectSubset<T, StudentsFeesFindUniqueArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentsFees that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentsFeesFindUniqueOrThrowArgs} args - Arguments to find a StudentsFees
     * @example
     * // Get one StudentsFees
     * const studentsFees = await prisma.studentsFees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentsFeesFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentsFeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentsFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesFindFirstArgs} args - Arguments to find a StudentsFees
     * @example
     * // Get one StudentsFees
     * const studentsFees = await prisma.studentsFees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentsFeesFindFirstArgs>(args?: SelectSubset<T, StudentsFeesFindFirstArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentsFees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesFindFirstOrThrowArgs} args - Arguments to find a StudentsFees
     * @example
     * // Get one StudentsFees
     * const studentsFees = await prisma.studentsFees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentsFeesFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentsFeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentsFees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentsFees
     * const studentsFees = await prisma.studentsFees.findMany()
     * 
     * // Get first 10 StudentsFees
     * const studentsFees = await prisma.studentsFees.findMany({ take: 10 })
     * 
     * // Only select the `payment_id`
     * const studentsFeesWithPayment_idOnly = await prisma.studentsFees.findMany({ select: { payment_id: true } })
     * 
     */
    findMany<T extends StudentsFeesFindManyArgs>(args?: SelectSubset<T, StudentsFeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentsFees.
     * @param {StudentsFeesCreateArgs} args - Arguments to create a StudentsFees.
     * @example
     * // Create one StudentsFees
     * const StudentsFees = await prisma.studentsFees.create({
     *   data: {
     *     // ... data to create a StudentsFees
     *   }
     * })
     * 
     */
    create<T extends StudentsFeesCreateArgs>(args: SelectSubset<T, StudentsFeesCreateArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentsFees.
     * @param {StudentsFeesCreateManyArgs} args - Arguments to create many StudentsFees.
     * @example
     * // Create many StudentsFees
     * const studentsFees = await prisma.studentsFees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentsFeesCreateManyArgs>(args?: SelectSubset<T, StudentsFeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentsFees and returns the data saved in the database.
     * @param {StudentsFeesCreateManyAndReturnArgs} args - Arguments to create many StudentsFees.
     * @example
     * // Create many StudentsFees
     * const studentsFees = await prisma.studentsFees.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentsFees and only return the `payment_id`
     * const studentsFeesWithPayment_idOnly = await prisma.studentsFees.createManyAndReturn({
     *   select: { payment_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentsFeesCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentsFeesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentsFees.
     * @param {StudentsFeesDeleteArgs} args - Arguments to delete one StudentsFees.
     * @example
     * // Delete one StudentsFees
     * const StudentsFees = await prisma.studentsFees.delete({
     *   where: {
     *     // ... filter to delete one StudentsFees
     *   }
     * })
     * 
     */
    delete<T extends StudentsFeesDeleteArgs>(args: SelectSubset<T, StudentsFeesDeleteArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentsFees.
     * @param {StudentsFeesUpdateArgs} args - Arguments to update one StudentsFees.
     * @example
     * // Update one StudentsFees
     * const studentsFees = await prisma.studentsFees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentsFeesUpdateArgs>(args: SelectSubset<T, StudentsFeesUpdateArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentsFees.
     * @param {StudentsFeesDeleteManyArgs} args - Arguments to filter StudentsFees to delete.
     * @example
     * // Delete a few StudentsFees
     * const { count } = await prisma.studentsFees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentsFeesDeleteManyArgs>(args?: SelectSubset<T, StudentsFeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentsFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentsFees
     * const studentsFees = await prisma.studentsFees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentsFeesUpdateManyArgs>(args: SelectSubset<T, StudentsFeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentsFees and returns the data updated in the database.
     * @param {StudentsFeesUpdateManyAndReturnArgs} args - Arguments to update many StudentsFees.
     * @example
     * // Update many StudentsFees
     * const studentsFees = await prisma.studentsFees.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentsFees and only return the `payment_id`
     * const studentsFeesWithPayment_idOnly = await prisma.studentsFees.updateManyAndReturn({
     *   select: { payment_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentsFeesUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentsFeesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentsFees.
     * @param {StudentsFeesUpsertArgs} args - Arguments to update or create a StudentsFees.
     * @example
     * // Update or create a StudentsFees
     * const studentsFees = await prisma.studentsFees.upsert({
     *   create: {
     *     // ... data to create a StudentsFees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentsFees we want to update
     *   }
     * })
     */
    upsert<T extends StudentsFeesUpsertArgs>(args: SelectSubset<T, StudentsFeesUpsertArgs<ExtArgs>>): Prisma__StudentsFeesClient<$Result.GetResult<Prisma.$StudentsFeesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentsFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesCountArgs} args - Arguments to filter StudentsFees to count.
     * @example
     * // Count the number of StudentsFees
     * const count = await prisma.studentsFees.count({
     *   where: {
     *     // ... the filter for the StudentsFees we want to count
     *   }
     * })
    **/
    count<T extends StudentsFeesCountArgs>(
      args?: Subset<T, StudentsFeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsFeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentsFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsFeesAggregateArgs>(args: Subset<T, StudentsFeesAggregateArgs>): Prisma.PrismaPromise<GetStudentsFeesAggregateType<T>>

    /**
     * Group by StudentsFees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsFeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentsFeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentsFeesGroupByArgs['orderBy'] }
        : { orderBy?: StudentsFeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentsFeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsFeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentsFees model
   */
  readonly fields: StudentsFeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentsFees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentsFeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends StudentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentsDefaultArgs<ExtArgs>>): Prisma__StudentsClient<$Result.GetResult<Prisma.$StudentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentsFees model
   */
  interface StudentsFeesFieldRefs {
    readonly payment_id: FieldRef<"StudentsFees", 'Int'>
    readonly payment_method: FieldRef<"StudentsFees", 'Payment'>
    readonly payment_amount: FieldRef<"StudentsFees", 'String'>
    readonly roll_no: FieldRef<"StudentsFees", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentsFees findUnique
   */
  export type StudentsFeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentsFees to fetch.
     */
    where: StudentsFeesWhereUniqueInput
  }

  /**
   * StudentsFees findUniqueOrThrow
   */
  export type StudentsFeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentsFees to fetch.
     */
    where: StudentsFeesWhereUniqueInput
  }

  /**
   * StudentsFees findFirst
   */
  export type StudentsFeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentsFees to fetch.
     */
    where?: StudentsFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsFees to fetch.
     */
    orderBy?: StudentsFeesOrderByWithRelationInput | StudentsFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentsFees.
     */
    cursor?: StudentsFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentsFees.
     */
    distinct?: StudentsFeesScalarFieldEnum | StudentsFeesScalarFieldEnum[]
  }

  /**
   * StudentsFees findFirstOrThrow
   */
  export type StudentsFeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentsFees to fetch.
     */
    where?: StudentsFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsFees to fetch.
     */
    orderBy?: StudentsFeesOrderByWithRelationInput | StudentsFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentsFees.
     */
    cursor?: StudentsFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsFees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentsFees.
     */
    distinct?: StudentsFeesScalarFieldEnum | StudentsFeesScalarFieldEnum[]
  }

  /**
   * StudentsFees findMany
   */
  export type StudentsFeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter, which StudentsFees to fetch.
     */
    where?: StudentsFeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentsFees to fetch.
     */
    orderBy?: StudentsFeesOrderByWithRelationInput | StudentsFeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentsFees.
     */
    cursor?: StudentsFeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentsFees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentsFees.
     */
    skip?: number
    distinct?: StudentsFeesScalarFieldEnum | StudentsFeesScalarFieldEnum[]
  }

  /**
   * StudentsFees create
   */
  export type StudentsFeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentsFees.
     */
    data: XOR<StudentsFeesCreateInput, StudentsFeesUncheckedCreateInput>
  }

  /**
   * StudentsFees createMany
   */
  export type StudentsFeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentsFees.
     */
    data: StudentsFeesCreateManyInput | StudentsFeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentsFees createManyAndReturn
   */
  export type StudentsFeesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * The data used to create many StudentsFees.
     */
    data: StudentsFeesCreateManyInput | StudentsFeesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentsFees update
   */
  export type StudentsFeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentsFees.
     */
    data: XOR<StudentsFeesUpdateInput, StudentsFeesUncheckedUpdateInput>
    /**
     * Choose, which StudentsFees to update.
     */
    where: StudentsFeesWhereUniqueInput
  }

  /**
   * StudentsFees updateMany
   */
  export type StudentsFeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentsFees.
     */
    data: XOR<StudentsFeesUpdateManyMutationInput, StudentsFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentsFees to update
     */
    where?: StudentsFeesWhereInput
    /**
     * Limit how many StudentsFees to update.
     */
    limit?: number
  }

  /**
   * StudentsFees updateManyAndReturn
   */
  export type StudentsFeesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * The data used to update StudentsFees.
     */
    data: XOR<StudentsFeesUpdateManyMutationInput, StudentsFeesUncheckedUpdateManyInput>
    /**
     * Filter which StudentsFees to update
     */
    where?: StudentsFeesWhereInput
    /**
     * Limit how many StudentsFees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentsFees upsert
   */
  export type StudentsFeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentsFees to update in case it exists.
     */
    where: StudentsFeesWhereUniqueInput
    /**
     * In case the StudentsFees found by the `where` argument doesn't exist, create a new StudentsFees with this data.
     */
    create: XOR<StudentsFeesCreateInput, StudentsFeesUncheckedCreateInput>
    /**
     * In case the StudentsFees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentsFeesUpdateInput, StudentsFeesUncheckedUpdateInput>
  }

  /**
   * StudentsFees delete
   */
  export type StudentsFeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
    /**
     * Filter which StudentsFees to delete.
     */
    where: StudentsFeesWhereUniqueInput
  }

  /**
   * StudentsFees deleteMany
   */
  export type StudentsFeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentsFees to delete
     */
    where?: StudentsFeesWhereInput
    /**
     * Limit how many StudentsFees to delete.
     */
    limit?: number
  }

  /**
   * StudentsFees without action
   */
  export type StudentsFeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsFees
     */
    select?: StudentsFeesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentsFees
     */
    omit?: StudentsFeesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentsFeesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudentsScalarFieldEnum: {
    roll_no: 'roll_no',
    name: 'name',
    age: 'age',
    gender: 'gender',
    dob: 'dob',
    bloodgroup: 'bloodgroup'
  };

  export type StudentsScalarFieldEnum = (typeof StudentsScalarFieldEnum)[keyof typeof StudentsScalarFieldEnum]


  export const StudentsProofScalarFieldEnum: {
    proof_id: 'proof_id',
    proof_type: 'proof_type',
    proof_link: 'proof_link',
    roll_no: 'roll_no'
  };

  export type StudentsProofScalarFieldEnum = (typeof StudentsProofScalarFieldEnum)[keyof typeof StudentsProofScalarFieldEnum]


  export const StudentsFeesScalarFieldEnum: {
    payment_id: 'payment_id',
    payment_method: 'payment_method',
    payment_amount: 'payment_amount',
    roll_no: 'roll_no'
  };

  export type StudentsFeesScalarFieldEnum = (typeof StudentsFeesScalarFieldEnum)[keyof typeof StudentsFeesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Prooftype'
   */
  export type EnumProoftypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Prooftype'>
    


  /**
   * Reference to a field of type 'Prooftype[]'
   */
  export type ListEnumProoftypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Prooftype[]'>
    


  /**
   * Reference to a field of type 'Payment'
   */
  export type EnumPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Payment'>
    


  /**
   * Reference to a field of type 'Payment[]'
   */
  export type ListEnumPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Payment[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StudentsWhereInput = {
    AND?: StudentsWhereInput | StudentsWhereInput[]
    OR?: StudentsWhereInput[]
    NOT?: StudentsWhereInput | StudentsWhereInput[]
    roll_no?: IntFilter<"Students"> | number
    name?: StringFilter<"Students"> | string
    age?: IntFilter<"Students"> | number
    gender?: EnumGenderFilter<"Students"> | $Enums.Gender
    dob?: StringFilter<"Students"> | string
    bloodgroup?: StringFilter<"Students"> | string
    studentsproof?: XOR<StudentsProofNullableScalarRelationFilter, StudentsProofWhereInput> | null
    studentfees?: StudentsFeesListRelationFilter
  }

  export type StudentsOrderByWithRelationInput = {
    roll_no?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    bloodgroup?: SortOrder
    studentsproof?: StudentsProofOrderByWithRelationInput
    studentfees?: StudentsFeesOrderByRelationAggregateInput
  }

  export type StudentsWhereUniqueInput = Prisma.AtLeast<{
    roll_no?: number
    AND?: StudentsWhereInput | StudentsWhereInput[]
    OR?: StudentsWhereInput[]
    NOT?: StudentsWhereInput | StudentsWhereInput[]
    name?: StringFilter<"Students"> | string
    age?: IntFilter<"Students"> | number
    gender?: EnumGenderFilter<"Students"> | $Enums.Gender
    dob?: StringFilter<"Students"> | string
    bloodgroup?: StringFilter<"Students"> | string
    studentsproof?: XOR<StudentsProofNullableScalarRelationFilter, StudentsProofWhereInput> | null
    studentfees?: StudentsFeesListRelationFilter
  }, "roll_no">

  export type StudentsOrderByWithAggregationInput = {
    roll_no?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    bloodgroup?: SortOrder
    _count?: StudentsCountOrderByAggregateInput
    _avg?: StudentsAvgOrderByAggregateInput
    _max?: StudentsMaxOrderByAggregateInput
    _min?: StudentsMinOrderByAggregateInput
    _sum?: StudentsSumOrderByAggregateInput
  }

  export type StudentsScalarWhereWithAggregatesInput = {
    AND?: StudentsScalarWhereWithAggregatesInput | StudentsScalarWhereWithAggregatesInput[]
    OR?: StudentsScalarWhereWithAggregatesInput[]
    NOT?: StudentsScalarWhereWithAggregatesInput | StudentsScalarWhereWithAggregatesInput[]
    roll_no?: IntWithAggregatesFilter<"Students"> | number
    name?: StringWithAggregatesFilter<"Students"> | string
    age?: IntWithAggregatesFilter<"Students"> | number
    gender?: EnumGenderWithAggregatesFilter<"Students"> | $Enums.Gender
    dob?: StringWithAggregatesFilter<"Students"> | string
    bloodgroup?: StringWithAggregatesFilter<"Students"> | string
  }

  export type StudentsProofWhereInput = {
    AND?: StudentsProofWhereInput | StudentsProofWhereInput[]
    OR?: StudentsProofWhereInput[]
    NOT?: StudentsProofWhereInput | StudentsProofWhereInput[]
    proof_id?: IntFilter<"StudentsProof"> | number
    proof_type?: EnumProoftypeFilter<"StudentsProof"> | $Enums.Prooftype
    proof_link?: StringFilter<"StudentsProof"> | string
    roll_no?: IntFilter<"StudentsProof"> | number
    students?: XOR<StudentsScalarRelationFilter, StudentsWhereInput>
  }

  export type StudentsProofOrderByWithRelationInput = {
    proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
    students?: StudentsOrderByWithRelationInput
  }

  export type StudentsProofWhereUniqueInput = Prisma.AtLeast<{
    proof_id?: number
    roll_no?: number
    AND?: StudentsProofWhereInput | StudentsProofWhereInput[]
    OR?: StudentsProofWhereInput[]
    NOT?: StudentsProofWhereInput | StudentsProofWhereInput[]
    proof_type?: EnumProoftypeFilter<"StudentsProof"> | $Enums.Prooftype
    proof_link?: StringFilter<"StudentsProof"> | string
    students?: XOR<StudentsScalarRelationFilter, StudentsWhereInput>
  }, "proof_id" | "roll_no">

  export type StudentsProofOrderByWithAggregationInput = {
    proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
    _count?: StudentsProofCountOrderByAggregateInput
    _avg?: StudentsProofAvgOrderByAggregateInput
    _max?: StudentsProofMaxOrderByAggregateInput
    _min?: StudentsProofMinOrderByAggregateInput
    _sum?: StudentsProofSumOrderByAggregateInput
  }

  export type StudentsProofScalarWhereWithAggregatesInput = {
    AND?: StudentsProofScalarWhereWithAggregatesInput | StudentsProofScalarWhereWithAggregatesInput[]
    OR?: StudentsProofScalarWhereWithAggregatesInput[]
    NOT?: StudentsProofScalarWhereWithAggregatesInput | StudentsProofScalarWhereWithAggregatesInput[]
    proof_id?: IntWithAggregatesFilter<"StudentsProof"> | number
    proof_type?: EnumProoftypeWithAggregatesFilter<"StudentsProof"> | $Enums.Prooftype
    proof_link?: StringWithAggregatesFilter<"StudentsProof"> | string
    roll_no?: IntWithAggregatesFilter<"StudentsProof"> | number
  }

  export type StudentsFeesWhereInput = {
    AND?: StudentsFeesWhereInput | StudentsFeesWhereInput[]
    OR?: StudentsFeesWhereInput[]
    NOT?: StudentsFeesWhereInput | StudentsFeesWhereInput[]
    payment_id?: IntFilter<"StudentsFees"> | number
    payment_method?: EnumPaymentFilter<"StudentsFees"> | $Enums.Payment
    payment_amount?: StringFilter<"StudentsFees"> | string
    roll_no?: IntFilter<"StudentsFees"> | number
    students?: XOR<StudentsScalarRelationFilter, StudentsWhereInput>
  }

  export type StudentsFeesOrderByWithRelationInput = {
    payment_id?: SortOrder
    payment_method?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
    students?: StudentsOrderByWithRelationInput
  }

  export type StudentsFeesWhereUniqueInput = Prisma.AtLeast<{
    payment_id?: number
    AND?: StudentsFeesWhereInput | StudentsFeesWhereInput[]
    OR?: StudentsFeesWhereInput[]
    NOT?: StudentsFeesWhereInput | StudentsFeesWhereInput[]
    payment_method?: EnumPaymentFilter<"StudentsFees"> | $Enums.Payment
    payment_amount?: StringFilter<"StudentsFees"> | string
    roll_no?: IntFilter<"StudentsFees"> | number
    students?: XOR<StudentsScalarRelationFilter, StudentsWhereInput>
  }, "payment_id">

  export type StudentsFeesOrderByWithAggregationInput = {
    payment_id?: SortOrder
    payment_method?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
    _count?: StudentsFeesCountOrderByAggregateInput
    _avg?: StudentsFeesAvgOrderByAggregateInput
    _max?: StudentsFeesMaxOrderByAggregateInput
    _min?: StudentsFeesMinOrderByAggregateInput
    _sum?: StudentsFeesSumOrderByAggregateInput
  }

  export type StudentsFeesScalarWhereWithAggregatesInput = {
    AND?: StudentsFeesScalarWhereWithAggregatesInput | StudentsFeesScalarWhereWithAggregatesInput[]
    OR?: StudentsFeesScalarWhereWithAggregatesInput[]
    NOT?: StudentsFeesScalarWhereWithAggregatesInput | StudentsFeesScalarWhereWithAggregatesInput[]
    payment_id?: IntWithAggregatesFilter<"StudentsFees"> | number
    payment_method?: EnumPaymentWithAggregatesFilter<"StudentsFees"> | $Enums.Payment
    payment_amount?: StringWithAggregatesFilter<"StudentsFees"> | string
    roll_no?: IntWithAggregatesFilter<"StudentsFees"> | number
  }

  export type StudentsCreateInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentsproof?: StudentsProofCreateNestedOneWithoutStudentsInput
    studentfees?: StudentsFeesCreateNestedManyWithoutStudentsInput
  }

  export type StudentsUncheckedCreateInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentsproof?: StudentsProofUncheckedCreateNestedOneWithoutStudentsInput
    studentfees?: StudentsFeesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentsUpdateInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentsproof?: StudentsProofUpdateOneWithoutStudentsNestedInput
    studentfees?: StudentsFeesUpdateManyWithoutStudentsNestedInput
  }

  export type StudentsUncheckedUpdateInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentsproof?: StudentsProofUncheckedUpdateOneWithoutStudentsNestedInput
    studentfees?: StudentsFeesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentsCreateManyInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
  }

  export type StudentsUpdateManyMutationInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsUncheckedUpdateManyInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsProofCreateInput = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
    students: StudentsCreateNestedOneWithoutStudentsproofInput
  }

  export type StudentsProofUncheckedCreateInput = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
    roll_no: number
  }

  export type StudentsProofUpdateInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
    students?: StudentsUpdateOneRequiredWithoutStudentsproofNestedInput
  }

  export type StudentsProofUncheckedUpdateInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
    roll_no?: IntFieldUpdateOperationsInput | number
  }

  export type StudentsProofCreateManyInput = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
    roll_no: number
  }

  export type StudentsProofUpdateManyMutationInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsProofUncheckedUpdateManyInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
    roll_no?: IntFieldUpdateOperationsInput | number
  }

  export type StudentsFeesCreateInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
    students: StudentsCreateNestedOneWithoutStudentfeesInput
  }

  export type StudentsFeesUncheckedCreateInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
    roll_no: number
  }

  export type StudentsFeesUpdateInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
    students?: StudentsUpdateOneRequiredWithoutStudentfeesNestedInput
  }

  export type StudentsFeesUncheckedUpdateInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
    roll_no?: IntFieldUpdateOperationsInput | number
  }

  export type StudentsFeesCreateManyInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
    roll_no: number
  }

  export type StudentsFeesUpdateManyMutationInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsFeesUncheckedUpdateManyInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
    roll_no?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type StudentsProofNullableScalarRelationFilter = {
    is?: StudentsProofWhereInput | null
    isNot?: StudentsProofWhereInput | null
  }

  export type StudentsFeesListRelationFilter = {
    every?: StudentsFeesWhereInput
    some?: StudentsFeesWhereInput
    none?: StudentsFeesWhereInput
  }

  export type StudentsFeesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentsCountOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    bloodgroup?: SortOrder
  }

  export type StudentsAvgOrderByAggregateInput = {
    roll_no?: SortOrder
    age?: SortOrder
  }

  export type StudentsMaxOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    bloodgroup?: SortOrder
  }

  export type StudentsMinOrderByAggregateInput = {
    roll_no?: SortOrder
    name?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    dob?: SortOrder
    bloodgroup?: SortOrder
  }

  export type StudentsSumOrderByAggregateInput = {
    roll_no?: SortOrder
    age?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumProoftypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Prooftype | EnumProoftypeFieldRefInput<$PrismaModel>
    in?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProoftypeFilter<$PrismaModel> | $Enums.Prooftype
  }

  export type StudentsScalarRelationFilter = {
    is?: StudentsWhereInput
    isNot?: StudentsWhereInput
  }

  export type StudentsProofCountOrderByAggregateInput = {
    proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsProofAvgOrderByAggregateInput = {
    proof_id?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsProofMaxOrderByAggregateInput = {
    proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsProofMinOrderByAggregateInput = {
    proof_id?: SortOrder
    proof_type?: SortOrder
    proof_link?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsProofSumOrderByAggregateInput = {
    proof_id?: SortOrder
    roll_no?: SortOrder
  }

  export type EnumProoftypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Prooftype | EnumProoftypeFieldRefInput<$PrismaModel>
    in?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProoftypeWithAggregatesFilter<$PrismaModel> | $Enums.Prooftype
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProoftypeFilter<$PrismaModel>
    _max?: NestedEnumProoftypeFilter<$PrismaModel>
  }

  export type EnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type StudentsFeesCountOrderByAggregateInput = {
    payment_id?: SortOrder
    payment_method?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsFeesAvgOrderByAggregateInput = {
    payment_id?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsFeesMaxOrderByAggregateInput = {
    payment_id?: SortOrder
    payment_method?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsFeesMinOrderByAggregateInput = {
    payment_id?: SortOrder
    payment_method?: SortOrder
    payment_amount?: SortOrder
    roll_no?: SortOrder
  }

  export type StudentsFeesSumOrderByAggregateInput = {
    payment_id?: SortOrder
    roll_no?: SortOrder
  }

  export type EnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type StudentsProofCreateNestedOneWithoutStudentsInput = {
    create?: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudentsProofCreateOrConnectWithoutStudentsInput
    connect?: StudentsProofWhereUniqueInput
  }

  export type StudentsFeesCreateNestedManyWithoutStudentsInput = {
    create?: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput> | StudentsFeesCreateWithoutStudentsInput[] | StudentsFeesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: StudentsFeesCreateOrConnectWithoutStudentsInput | StudentsFeesCreateOrConnectWithoutStudentsInput[]
    createMany?: StudentsFeesCreateManyStudentsInputEnvelope
    connect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
  }

  export type StudentsProofUncheckedCreateNestedOneWithoutStudentsInput = {
    create?: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudentsProofCreateOrConnectWithoutStudentsInput
    connect?: StudentsProofWhereUniqueInput
  }

  export type StudentsFeesUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput> | StudentsFeesCreateWithoutStudentsInput[] | StudentsFeesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: StudentsFeesCreateOrConnectWithoutStudentsInput | StudentsFeesCreateOrConnectWithoutStudentsInput[]
    createMany?: StudentsFeesCreateManyStudentsInputEnvelope
    connect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type StudentsProofUpdateOneWithoutStudentsNestedInput = {
    create?: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudentsProofCreateOrConnectWithoutStudentsInput
    upsert?: StudentsProofUpsertWithoutStudentsInput
    disconnect?: StudentsProofWhereInput | boolean
    delete?: StudentsProofWhereInput | boolean
    connect?: StudentsProofWhereUniqueInput
    update?: XOR<XOR<StudentsProofUpdateToOneWithWhereWithoutStudentsInput, StudentsProofUpdateWithoutStudentsInput>, StudentsProofUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentsFeesUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput> | StudentsFeesCreateWithoutStudentsInput[] | StudentsFeesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: StudentsFeesCreateOrConnectWithoutStudentsInput | StudentsFeesCreateOrConnectWithoutStudentsInput[]
    upsert?: StudentsFeesUpsertWithWhereUniqueWithoutStudentsInput | StudentsFeesUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: StudentsFeesCreateManyStudentsInputEnvelope
    set?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    disconnect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    delete?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    connect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    update?: StudentsFeesUpdateWithWhereUniqueWithoutStudentsInput | StudentsFeesUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: StudentsFeesUpdateManyWithWhereWithoutStudentsInput | StudentsFeesUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: StudentsFeesScalarWhereInput | StudentsFeesScalarWhereInput[]
  }

  export type StudentsProofUncheckedUpdateOneWithoutStudentsNestedInput = {
    create?: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudentsProofCreateOrConnectWithoutStudentsInput
    upsert?: StudentsProofUpsertWithoutStudentsInput
    disconnect?: StudentsProofWhereInput | boolean
    delete?: StudentsProofWhereInput | boolean
    connect?: StudentsProofWhereUniqueInput
    update?: XOR<XOR<StudentsProofUpdateToOneWithWhereWithoutStudentsInput, StudentsProofUpdateWithoutStudentsInput>, StudentsProofUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentsFeesUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput> | StudentsFeesCreateWithoutStudentsInput[] | StudentsFeesUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: StudentsFeesCreateOrConnectWithoutStudentsInput | StudentsFeesCreateOrConnectWithoutStudentsInput[]
    upsert?: StudentsFeesUpsertWithWhereUniqueWithoutStudentsInput | StudentsFeesUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: StudentsFeesCreateManyStudentsInputEnvelope
    set?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    disconnect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    delete?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    connect?: StudentsFeesWhereUniqueInput | StudentsFeesWhereUniqueInput[]
    update?: StudentsFeesUpdateWithWhereUniqueWithoutStudentsInput | StudentsFeesUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: StudentsFeesUpdateManyWithWhereWithoutStudentsInput | StudentsFeesUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: StudentsFeesScalarWhereInput | StudentsFeesScalarWhereInput[]
  }

  export type StudentsCreateNestedOneWithoutStudentsproofInput = {
    create?: XOR<StudentsCreateWithoutStudentsproofInput, StudentsUncheckedCreateWithoutStudentsproofInput>
    connectOrCreate?: StudentsCreateOrConnectWithoutStudentsproofInput
    connect?: StudentsWhereUniqueInput
  }

  export type EnumProoftypeFieldUpdateOperationsInput = {
    set?: $Enums.Prooftype
  }

  export type StudentsUpdateOneRequiredWithoutStudentsproofNestedInput = {
    create?: XOR<StudentsCreateWithoutStudentsproofInput, StudentsUncheckedCreateWithoutStudentsproofInput>
    connectOrCreate?: StudentsCreateOrConnectWithoutStudentsproofInput
    upsert?: StudentsUpsertWithoutStudentsproofInput
    connect?: StudentsWhereUniqueInput
    update?: XOR<XOR<StudentsUpdateToOneWithWhereWithoutStudentsproofInput, StudentsUpdateWithoutStudentsproofInput>, StudentsUncheckedUpdateWithoutStudentsproofInput>
  }

  export type StudentsCreateNestedOneWithoutStudentfeesInput = {
    create?: XOR<StudentsCreateWithoutStudentfeesInput, StudentsUncheckedCreateWithoutStudentfeesInput>
    connectOrCreate?: StudentsCreateOrConnectWithoutStudentfeesInput
    connect?: StudentsWhereUniqueInput
  }

  export type EnumPaymentFieldUpdateOperationsInput = {
    set?: $Enums.Payment
  }

  export type StudentsUpdateOneRequiredWithoutStudentfeesNestedInput = {
    create?: XOR<StudentsCreateWithoutStudentfeesInput, StudentsUncheckedCreateWithoutStudentfeesInput>
    connectOrCreate?: StudentsCreateOrConnectWithoutStudentfeesInput
    upsert?: StudentsUpsertWithoutStudentfeesInput
    connect?: StudentsWhereUniqueInput
    update?: XOR<XOR<StudentsUpdateToOneWithWhereWithoutStudentfeesInput, StudentsUpdateWithoutStudentfeesInput>, StudentsUncheckedUpdateWithoutStudentfeesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumProoftypeFilter<$PrismaModel = never> = {
    equals?: $Enums.Prooftype | EnumProoftypeFieldRefInput<$PrismaModel>
    in?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProoftypeFilter<$PrismaModel> | $Enums.Prooftype
  }

  export type NestedEnumProoftypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Prooftype | EnumProoftypeFieldRefInput<$PrismaModel>
    in?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Prooftype[] | ListEnumProoftypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProoftypeWithAggregatesFilter<$PrismaModel> | $Enums.Prooftype
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProoftypeFilter<$PrismaModel>
    _max?: NestedEnumProoftypeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type NestedEnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type StudentsProofCreateWithoutStudentsInput = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
  }

  export type StudentsProofUncheckedCreateWithoutStudentsInput = {
    proof_id: number
    proof_type: $Enums.Prooftype
    proof_link: string
  }

  export type StudentsProofCreateOrConnectWithoutStudentsInput = {
    where: StudentsProofWhereUniqueInput
    create: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
  }

  export type StudentsFeesCreateWithoutStudentsInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
  }

  export type StudentsFeesUncheckedCreateWithoutStudentsInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
  }

  export type StudentsFeesCreateOrConnectWithoutStudentsInput = {
    where: StudentsFeesWhereUniqueInput
    create: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput>
  }

  export type StudentsFeesCreateManyStudentsInputEnvelope = {
    data: StudentsFeesCreateManyStudentsInput | StudentsFeesCreateManyStudentsInput[]
    skipDuplicates?: boolean
  }

  export type StudentsProofUpsertWithoutStudentsInput = {
    update: XOR<StudentsProofUpdateWithoutStudentsInput, StudentsProofUncheckedUpdateWithoutStudentsInput>
    create: XOR<StudentsProofCreateWithoutStudentsInput, StudentsProofUncheckedCreateWithoutStudentsInput>
    where?: StudentsProofWhereInput
  }

  export type StudentsProofUpdateToOneWithWhereWithoutStudentsInput = {
    where?: StudentsProofWhereInput
    data: XOR<StudentsProofUpdateWithoutStudentsInput, StudentsProofUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentsProofUpdateWithoutStudentsInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsProofUncheckedUpdateWithoutStudentsInput = {
    proof_id?: IntFieldUpdateOperationsInput | number
    proof_type?: EnumProoftypeFieldUpdateOperationsInput | $Enums.Prooftype
    proof_link?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsFeesUpsertWithWhereUniqueWithoutStudentsInput = {
    where: StudentsFeesWhereUniqueInput
    update: XOR<StudentsFeesUpdateWithoutStudentsInput, StudentsFeesUncheckedUpdateWithoutStudentsInput>
    create: XOR<StudentsFeesCreateWithoutStudentsInput, StudentsFeesUncheckedCreateWithoutStudentsInput>
  }

  export type StudentsFeesUpdateWithWhereUniqueWithoutStudentsInput = {
    where: StudentsFeesWhereUniqueInput
    data: XOR<StudentsFeesUpdateWithoutStudentsInput, StudentsFeesUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentsFeesUpdateManyWithWhereWithoutStudentsInput = {
    where: StudentsFeesScalarWhereInput
    data: XOR<StudentsFeesUpdateManyMutationInput, StudentsFeesUncheckedUpdateManyWithoutStudentsInput>
  }

  export type StudentsFeesScalarWhereInput = {
    AND?: StudentsFeesScalarWhereInput | StudentsFeesScalarWhereInput[]
    OR?: StudentsFeesScalarWhereInput[]
    NOT?: StudentsFeesScalarWhereInput | StudentsFeesScalarWhereInput[]
    payment_id?: IntFilter<"StudentsFees"> | number
    payment_method?: EnumPaymentFilter<"StudentsFees"> | $Enums.Payment
    payment_amount?: StringFilter<"StudentsFees"> | string
    roll_no?: IntFilter<"StudentsFees"> | number
  }

  export type StudentsCreateWithoutStudentsproofInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentfees?: StudentsFeesCreateNestedManyWithoutStudentsInput
  }

  export type StudentsUncheckedCreateWithoutStudentsproofInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentfees?: StudentsFeesUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentsCreateOrConnectWithoutStudentsproofInput = {
    where: StudentsWhereUniqueInput
    create: XOR<StudentsCreateWithoutStudentsproofInput, StudentsUncheckedCreateWithoutStudentsproofInput>
  }

  export type StudentsUpsertWithoutStudentsproofInput = {
    update: XOR<StudentsUpdateWithoutStudentsproofInput, StudentsUncheckedUpdateWithoutStudentsproofInput>
    create: XOR<StudentsCreateWithoutStudentsproofInput, StudentsUncheckedCreateWithoutStudentsproofInput>
    where?: StudentsWhereInput
  }

  export type StudentsUpdateToOneWithWhereWithoutStudentsproofInput = {
    where?: StudentsWhereInput
    data: XOR<StudentsUpdateWithoutStudentsproofInput, StudentsUncheckedUpdateWithoutStudentsproofInput>
  }

  export type StudentsUpdateWithoutStudentsproofInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentfees?: StudentsFeesUpdateManyWithoutStudentsNestedInput
  }

  export type StudentsUncheckedUpdateWithoutStudentsproofInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentfees?: StudentsFeesUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentsCreateWithoutStudentfeesInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentsproof?: StudentsProofCreateNestedOneWithoutStudentsInput
  }

  export type StudentsUncheckedCreateWithoutStudentfeesInput = {
    roll_no: number
    name: string
    age: number
    gender: $Enums.Gender
    dob: string
    bloodgroup: string
    studentsproof?: StudentsProofUncheckedCreateNestedOneWithoutStudentsInput
  }

  export type StudentsCreateOrConnectWithoutStudentfeesInput = {
    where: StudentsWhereUniqueInput
    create: XOR<StudentsCreateWithoutStudentfeesInput, StudentsUncheckedCreateWithoutStudentfeesInput>
  }

  export type StudentsUpsertWithoutStudentfeesInput = {
    update: XOR<StudentsUpdateWithoutStudentfeesInput, StudentsUncheckedUpdateWithoutStudentfeesInput>
    create: XOR<StudentsCreateWithoutStudentfeesInput, StudentsUncheckedCreateWithoutStudentfeesInput>
    where?: StudentsWhereInput
  }

  export type StudentsUpdateToOneWithWhereWithoutStudentfeesInput = {
    where?: StudentsWhereInput
    data: XOR<StudentsUpdateWithoutStudentfeesInput, StudentsUncheckedUpdateWithoutStudentfeesInput>
  }

  export type StudentsUpdateWithoutStudentfeesInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentsproof?: StudentsProofUpdateOneWithoutStudentsNestedInput
  }

  export type StudentsUncheckedUpdateWithoutStudentfeesInput = {
    roll_no?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    dob?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    studentsproof?: StudentsProofUncheckedUpdateOneWithoutStudentsNestedInput
  }

  export type StudentsFeesCreateManyStudentsInput = {
    payment_id: number
    payment_method: $Enums.Payment
    payment_amount: string
  }

  export type StudentsFeesUpdateWithoutStudentsInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsFeesUncheckedUpdateWithoutStudentsInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
  }

  export type StudentsFeesUncheckedUpdateManyWithoutStudentsInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    payment_method?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    payment_amount?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}